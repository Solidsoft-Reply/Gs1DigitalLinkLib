// --------------------------------------------------------------------------
// <copyright file="DigitalLinkExtensions.cs" company="Solidsoft Reply Ltd.">
// Copyright © 2025 Solidsoft Reply Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
// <summary>
// Extension methods for converting GS1 Digital Link data between different representations.
// </summary>
// --------------------------------------------------------------------------

namespace Solidsoft.Reply.Gs1DigitalLinkLib;

using System;

/// <summary>
/// Extension methods for converting GS1 Digital Link data between different representations.
/// </summary>
public static partial class DigitalLinkExtensions {

    /// <summary>
    /// Translates a GS1 element string to data.
    /// </summary>
    /// <param name="elementString">The GS1 Digital Link element string.</param>
    /// <param name="noValidation">
    /// If true, the GS1 Digital Link element string is not validated. The data values may contain invalid AIs and AI values.
    /// </param>
    /// <returns>GS1 Digital Link data.</returns>
    /// <exception cref="ArgumentException">The GS1 Digital Link element string is invalid.</exception>
    /// <remarks>The GS1 Digital Link element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1DigitalLinkData ToGs1DigitalLinkData(this Gs1ElementString elementString, bool noValidation = false) =>
        DigitalLinkConvert.FromGs1ElementStringToDigitalLinkData(elementString, noValidation);

    /// <summary>
    /// Translates a GS1 Digital Link or element string to data.
    /// </summary>
    /// <param name="gs1DigitalLinkUriOrElementString">The Digital Link URI or element string.</param>
    /// <param name="noValidation">
    /// If true, and the provided data is a GS1 Digital Link element string, the element string is not validated.
    /// The data values may contain invalid AIs and AI values.
    /// </param>
    /// <returns>GS1 Digital Link data.</returns>
    /// <exception cref="ArgumentException">The GS1 Digital Link element string is invalid.</exception>
    /// <remarks>The GS1 DIgital Link element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1DigitalLinkData ToGs1DigitalLinkData(this string gs1DigitalLinkUriOrElementString, bool noValidation = false) {
        Exception? exception;

        try {
            return DigitalLinkConvert.FromGs1DigitalLinkToData(gs1DigitalLinkUriOrElementString);
        }
        catch (Exception ex) {
            exception = ex;

            try {
                return DigitalLinkConvert.FromGs1ElementStringToDigitalLinkData(new Gs1ElementString(gs1DigitalLinkUriOrElementString), noValidation);
            }
            catch {
                throw exception;
            }
        }
    }

    /// <summary>
    /// Translates a GS1 Digital Link to data.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <returns>GS1 Digital Link data.</returns>
    /// <exception cref="ArgumentException">Invalid GS1 Digital Link.</exception>
    public static Gs1DigitalLinkData ToGs1DigitalLinkData(this Gs1DigitalLink digitalLink) =>
        DigitalLinkConvert.FromGs1DigitalLinkToData(digitalLink);

    /// <summary>
    /// Translates a GS1 Digital Link to data.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <returns>GS1 Digital Link data.</returns>
    /// <exception cref="ArgumentException">Invalid GS1 Digital Link.</exception>
    public static Gs1DigitalLinkData ToGs1DigitLinkData(this Uri gs1DigitalLinkUri) =>
        DigitalLinkConvert.FromGs1DigitalLinkToData(gs1DigitalLinkUri.ToString());

    /// <summary>
    /// Translates GS1 Digital Link data to a Digital Link using short names.
    /// </summary>
    /// <param name="digitalLinkData">GS1 Digital Link data.</param>
    /// <param name="uriStem">The URI stem for the Digital Link. If omitted, the library will use https://id.gs1.org.</param>
    /// <param name="digitalLinkForm">The level of compression to apply to the Digital Link URI.</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non- GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <exception cref="ArgumentException">Invalid data was passed to the method.</exception>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ToGs1DigitalLinkWithShortNames(
        this Gs1DigitalLinkData digitalLinkData,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.FromGs1DigitalLinkDataToDigitalLinkWithShortNames(
                digitalLinkData,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Translates GS1 Digital Link data to a GS1 Digital Link using short names.
    /// </summary>
    /// <param name="gs1DigitalLinkData">A dictionary of GS1 Digital Link AI values.</param>
    /// <param name="uriStem">The URI stem for the Digital Link. If omitted, the library will use https://id.gs1.org.</param>
    /// <param name="digitalLinkForm">The level of compression to apply to the Digital Link URI.</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">Any additional fragment specifier to be included in the URI.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <exception cref="ArgumentException">Invalid data was passed to the method.</exception>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ToGs1DigitalLinkWithShortNames(
        this IReadOnlyDictionary<string, string> gs1DigitalLinkData,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1DigitalLinkDataToDigitalLinkWithShortNames(
                gs1DigitalLinkData,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                nonGs1KeyValuePairs,
                compressNonGs1KeyValuePairs,
                otherQueryContent,
                fragment);

    /// <summary>
    /// Translates GS1 Digital Link data into a Digital Link.
    /// </summary>
    /// <param name="digitalLinkData">GS1 Digital Link data.</param>
    /// <param name="uriStem">The URI stem for the Digital Link. If omitted, the library will use https://id.gs1.org.</param>
    /// <param name="digitalLinkForm">The level of compression to apply to the Digital Link URI.</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <exception cref="ArgumentException">Invalid data was passed to the method.</exception>
    public static Gs1DigitalLink ToGs1DigitalLink(
        this Gs1DigitalLinkData digitalLinkData,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.FromGs1DigitalLinkDataToDigitalLink(
                digitalLinkData,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Translates GS1 Digital Link data into a Digital Link.
    /// </summary>
    /// <param name="gs1DigitalLinkData">A dictionary of GS1 Digital Link AI values.</param>
    /// <param name="uriStem">The URI stem for the Digital Link. If omitted, the library will use https://id.gs1.org.</param>
    /// <param name="digitalLinkForm">The level of compression to apply to the Digital Link URI.</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">Any additional fragment specifier to be included in the URI.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <exception cref="ArgumentException">Invalid data was passed to the method.</exception>
    public static Gs1DigitalLink ToGs1DigitalLink(
        this IReadOnlyDictionary<string, string> gs1DigitalLinkData,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1DigitalLinkDataToDigitalLink(
                new Gs1DigitalLinkData(
                    gs1DigitalLinkData,
                    nonGs1KeyValuePairs: nonGs1KeyValuePairs,
                    otherQueryStringContent: otherQueryContent,
                    fragmentSpecifier: fragment),
                uriStem,
                digitalLinkForm,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Translates GS1 Digital Link data to an element string.
    /// </summary>
    /// <param name="digitalLinkData">GS1 Digital Link data.</param>
    /// <param name="brackets">If true, the method returns an element string using bracket notation.</param>
    /// <returns>A GS1 element string.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1ElementString ToGs1ElementString(this Gs1DigitalLinkData digitalLinkData, bool brackets = false) =>
        DigitalLinkConvert.FromGs1DigitalLinkDataToElementString(digitalLinkData.Gs1AIs, brackets);

    /// <summary>
    /// Translates GS1 Digital Link data to an element string.
    /// </summary>
    /// <param name="gs1DigitalLinkData">A dictionary of GS1 Digital Link AI values.</param>
    /// <param name="brackets">If true, the method returns an element string using bracket notation.</param>
    /// <returns>A GS1 element string.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1ElementString ToGs1ElementString(this IReadOnlyDictionary<string, string> gs1DigitalLinkData, bool brackets = false) =>
                DigitalLinkConvert.FromGs1DigitalLinkDataToElementString(gs1DigitalLinkData, brackets);

    /// <summary>
    /// Translates a GS1 element string into a Digital Link URI.
    /// </summary>
    /// <param name="elementString">The element string.</param>
    /// <param name="uriStem">The URI stem.</param>
    /// <param name="digitalLinkForm">The form of the GS1 digital Link (compressed, partially compressed or uncompressed).</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">An additional fragment.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ToGs1DigitalLinkWithShortNames(
        this Gs1ElementString elementString,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1ElementStringToDigitalLinkWithShortNames(
                elementString,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                nonGs1KeyValuePairs,
                compressNonGs1KeyValuePairs,
                otherQueryContent,
                fragment);

    /// <summary>
    /// Translates a GS1 element string into a Digital Link URI.
    /// </summary>
    /// <param name="gs1ElementString">The element string.</param>
    /// <param name="uriStem">The URI stem.</param>
    /// <param name="digitalLinkForm">The form of the GS1 digital Link (compressed, partially compressed or uncompressed).</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">An additional fragment.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ToGs1DigitalLinkWithShortNames(
        this string gs1ElementString,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1ElementStringToDigitalLinkWithShortNames(
                gs1ElementString,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                nonGs1KeyValuePairs,
                compressNonGs1KeyValuePairs,
                otherQueryContent,
                fragment);

    /// <summary>
    /// Translates a GS1 element string into a GS1 Digital Link.
    /// </summary>
    /// <param name="elementString">The element string.</param>
    /// <param name="uriStem">The URI stem.</param>
    /// <param name="digitalLinkForm">The form of the GS1 digital Link (compressed, partially compressed or uncompressed).</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">An additional fragment.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1DigitalLink ToGs1DigitalLink(
        this Gs1ElementString elementString,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1ElementStringToDigitalLink(
                elementString.Value,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                nonGs1KeyValuePairs,
                compressNonGs1KeyValuePairs,
                otherQueryContent,
                fragment);

    /// <summary>
    /// Translates a GS1 element string into a Digital Link.
    /// </summary>
    /// <param name="gs1ElementString">The element string.</param>
    /// <param name="uriStem">The URI stem.</param>
    /// <param name="digitalLinkForm">The form of the GS1 digital Link (compressed, partially compressed or uncompressed).</param>
    /// <param name="useOptimisations">If true, compression optimisations are applied, if any exist.</param>
    /// <param name="nonGs1KeyValuePairs">A dictionary of any additional non-GS1 key-value parameters to be included in the query string.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <param name="otherQueryContent">Any additional non- key-value content to be included in the query string.</param>
    /// <param name="fragment">An additional fragment.</param>
    /// <returns>A GS1 Digital Link.</returns>
    /// <remarks>The GS1 element string may be in one of two forms.
    /// <para>
    /// <list type="number">
    ///     <item>
    ///         <term>Bracketed</term>
    ///         <description>An element string that delimits AIs using parentheses; e.g. "(01)05412345000013(3103)000189(3923)2172(10)ABC123".</description>
    ///     </item>
    ///     <item>
    ///         <term>Unbracketed</term>
    ///         <description>An element string, as it would be reported by key barcode scanner; e.g. "3103000189010541234500001339232172&#x241D;10ABC123".</description>
    ///     </item>
    /// </list>
    /// <para>Unbracketed input may represent data directly read by key barcode scanner, in which case this code assumes the following:</para>
    /// <list type="bullet">
    ///     <item>
    ///         <term>Precision</term>
    ///         <description>The data is precisely what is represented in the barcode. No attempt is made to correct for scanner or
    ///                      computer misconfiguration or incompatibilities.</description>
    ///     </item>
    ///     <item>
    ///         <term>AIM Identifiers</term>
    ///         <description>If the barcode data is prefixed, the prefix is one of key set of expected AIM identifiers (those that represent
    ///                      barcodes that may be correctly used to represent GS1 data in accordance with GS1 standards - NB., there are
    ///                      other non-standard ways in which GS1 data could be represented in key barcode.</description>
    ///     </item>
    ///     <item>
    ///         <term>Prefixes and Suffixes</term>
    ///         <description>No other prefix or suffix data is generated by the barcode scanner.</description>
    ///     </item>
    /// </list>
    /// </para>
    /// <para>If any of these assumptions does not hold, you may need to perform additional processing before invoking this method.</para>
    /// </remarks>
    public static Gs1DigitalLink ToGs1DigitalLink(
        this string gs1ElementString,
        string? uriStem = null,
        DigitalLinkForm digitalLinkForm = DigitalLinkForm.Uncompressed,
        bool useOptimisations = false,
        IReadOnlyDictionary<string, string>? nonGs1KeyValuePairs = null,
        bool compressNonGs1KeyValuePairs = false,
        string? otherQueryContent = null,
        string? fragment = null) =>
            DigitalLinkConvert.FromGs1ElementStringToDigitalLink(
                gs1ElementString,
                uriStem,
                digitalLinkForm,
                useOptimisations,
                nonGs1KeyValuePairs,
                compressNonGs1KeyValuePairs,
                otherQueryContent,
                fragment);

    /// <summary>
    /// Translates a GS1 Digital Link to an element string.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <param name="brackets">If true, the method returns a GS1 element string using bracket notation.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1ElementString ToGs1ElementString(this Gs1DigitalLink digitalLink, bool brackets = false) =>
        DigitalLinkConvert.FromGs1DigitalLinkToElementString(digitalLink, brackets);

    /// <summary>
    /// Translates a GS1 Digital Link to an element string.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="brackets">If true, the method returns a GS1 element string using bracket notation.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1ElementString ToGs1ElementString(this string gs1DigitalLinkUri, bool brackets = false) =>
        DigitalLinkConvert.FromGs1DigitalLinkToElementString(gs1DigitalLinkUri, brackets);

    /// <summary>
    /// Translates a GS1 Digital Link to an element string.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="brackets">If true, the method returns an element string using bracket notation.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1ElementString ToGs1ElementString(this Uri gs1DigitalLinkUri, bool brackets = false) =>
        DigitalLinkConvert.FromGs1DigitalLinkToElementString(gs1DigitalLinkUri.ToString(), brackets);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI, using short names for partially
    /// compressed or uncompressed URIs.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ChangeCompressionLevelWithShortNames(
        this Gs1DigitalLink digitalLink,
        CompressionLevel compressionLevel,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.Gs1DigitalLinkCompressionLevelWithShortNames(
                digitalLink,
                compressionLevel,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI, using short names for partially
    /// compressed or uncompressed URIs.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ChangeGs1CompressionLevelWithShortNames(
    this string gs1DigitalLinkUri,
    CompressionLevel compressionLevel,
    bool useOptimisations = false,
    bool compressNonGs1KeyValuePairs = false) =>
        DigitalLinkConvert.Gs1DigitalLinkCompressionLevelWithShortNames(
            gs1DigitalLinkUri,
            compressionLevel,
            useOptimisations,
            compressNonGs1KeyValuePairs);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI, using short names for partially
    /// compressed or uncompressed URIs.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    [Obsolete("This method supports the use of short names ('convenience alphas') which are obsolete. This method is retained for legacy purposes, only.")]
    public static Gs1DigitalLink ChangeGs1CompressionLevelWithShortNames(
    this Uri gs1DigitalLinkUri,
    CompressionLevel compressionLevel,
    bool useOptimisations = false,
    bool compressNonGs1KeyValuePairs = false) =>
        DigitalLinkConvert.Gs1DigitalLinkCompressionLevelWithShortNames(
            gs1DigitalLinkUri.ToString(),
            compressionLevel,
            useOptimisations,
            compressNonGs1KeyValuePairs);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1DigitalLink ChangeCompressionLevel(
        this Gs1DigitalLink digitalLink,
        CompressionLevel compressionLevel,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.Gs1DigitalLinkCompressionLevel(
                digitalLink,
                compressionLevel,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1DigitalLink ChangeGs1CompressionLevel(
        this string gs1DigitalLinkUri,
        CompressionLevel compressionLevel,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.Gs1DigitalLinkCompressionLevel(
                gs1DigitalLinkUri,
                compressionLevel,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Changes the compression level of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <param name="compressionLevel">The required compression level.</param>
    /// <param name="useOptimisations">If true, compression optimisations are used, if any apply.</param>
    /// <param name="compressNonGs1KeyValuePairs">If true, non-GS1 key-value pairs are compressed.</param>
    /// <returns>A GS1 Digital Link.</returns>
    public static Gs1DigitalLink ChangeGs1CompressionLevel(
        this Uri gs1DigitalLinkUri,
        CompressionLevel compressionLevel,
        bool useOptimisations = false,
        bool compressNonGs1KeyValuePairs = false) =>
            DigitalLinkConvert.Gs1DigitalLinkCompressionLevel(
                gs1DigitalLinkUri.ToString(),
                compressionLevel,
                useOptimisations,
                compressNonGs1KeyValuePairs);

    /// <summary>
    /// Analyses a GS1 Digital Link URI.
    /// </summary>
    /// <param name="digitalLink">The Digital Link.</param>
    /// <param name="extended">If true, the analyser returns additional structured
    /// data and an element string.</param>
    /// If true, the method performs an extended analysis, returning semantics, a
    /// structured representation of GS1 elements and an element string.
    /// <returns>Analysis results.</returns>
    public static UriAnalytics AnalyseUri(this Gs1DigitalLink digitalLink, bool extended = false) =>
        DigitalLinkConvert.AnalyseUri(digitalLink.Value, extended, nameof(AnalyseUri), nameof(digitalLink));

    /// <summary>
    /// Analyses a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The Digital Link URI.</param>
    /// <param name="extended">
    /// If true, the method performs an extended analysis, returning semantics, a
    /// structured representation of GS1 elements and an element string.
    /// </param>
    /// <returns>Analysis results.</returns>
    public static UriAnalytics AnalyseGs1DigitalLinkUri(this string gs1DigitalLinkUri, bool extended = false) =>
        DigitalLinkConvert.AnalyseUri(gs1DigitalLinkUri, extended, nameof(AnalyseGs1DigitalLinkUri), nameof(gs1DigitalLinkUri));

    /// <summary>
    /// Analyses a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The Digital Link URI.</param>
    /// <param name="extended">If true, the analyser returns additional structured data and an element string.</param>
    /// If true, the method performs an extended analysis, returning semantics, a
    /// structured representation of GS1 elements and an element string.
    /// <returns>Analysis results.</returns>
    public static UriAnalytics AnalyseGs1DigitalLinkUri(this Uri gs1DigitalLinkUri, bool extended = false) =>
        DigitalLinkConvert.AnalyseUri(gs1DigitalLinkUri, extended, nameof(AnalyseGs1DigitalLinkUri), nameof(gs1DigitalLinkUri));

    /// <summary>
    /// Analyse the semantics of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <returns>Semantic analysis results.</returns>
    public static UriSemantics AnalyseUriSemantics(this Gs1DigitalLink digitalLink) =>
        DigitalLinkConvert.AnalyseUriSemantics(digitalLink.Value);

    /// <summary>
    /// Analyse the semantics of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <returns>Semantic analysis results.</returns>
    public static UriSemantics AnalyseGs1DigitalLinkUriSemantics(this string gs1DigitalLinkUri) =>
        DigitalLinkConvert.AnalyseUriSemantics(gs1DigitalLinkUri);

    /// <summary>
    /// Analyse the semantics of a GS1 Digital Link URI.
    /// </summary>
    /// <param name="gs1DigitalLinkUri">The GS1 Digital Link URI.</param>
    /// <returns>Semantic analysis results.</returns>
    public static UriSemantics AnalyseGs1DigitalLinkUriSemantics(this Uri gs1DigitalLinkUri) =>
        DigitalLinkConvert.AnalyseUriSemantics(gs1DigitalLinkUri.ToString());

    /// <summary>
    /// Translates a GS1 Digital Link to a structured representation of its content.
    /// </summary>
    /// <param name="digitalLink">The GS1 Digital Link.</param>
    /// <returns>A structured representation of the GS1 Digital Link URI.</returns>
    public static StructuredData ToStructuredData(this Gs1DigitalLink digitalLink) =>
        digitalLink.ChangeCompressionLevel(CompressionLevel.Uncompressed).AnalyseUri(true).StructuredData;

    /// <summary>
    /// Translates a GS1 Digital Link URI to a structured representation of its content.
    /// </summary>
    /// <param name="digitalLinkUri">The GS1 Digital Link URI.</param>
    /// <returns>A structured representation of the GS1 Digital Link URI.</returns>
    public static StructuredData FromGS1DigitalLinkToStructuredData(this string digitalLinkUri) =>
        new Gs1DigitalLink(digitalLinkUri).ChangeCompressionLevel(CompressionLevel.Uncompressed).AnalyseUri(true).StructuredData;

    /// <summary>
    /// Translates a GS1 Digital Link URI to a structured representation of its content.
    /// </summary>
    /// <param name="digitalLinkUri">The GS1 Digital Link URI.</param>
    /// <returns>A structured representation of the GS1 Digital Link URI.</returns>
    public static StructuredData FromGS1DigitalLinkToStructuredData(this Uri digitalLinkUri) =>
        new Gs1DigitalLink(digitalLinkUri).ChangeCompressionLevel(CompressionLevel.Uncompressed).AnalyseUri(true).StructuredData;
}