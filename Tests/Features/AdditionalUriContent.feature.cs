// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Gs1DigitalLinkToolkitTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdditionalUriContentFeature : object, Xunit.IClassFixture<AdditionalUriContentFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AdditionalUriContent", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AdditionalUriContent.feature"
#line hidden
        
        public AdditionalUriContentFeature(AdditionalUriContentFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table1.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table1.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table1.AddRow(new string[] {
                            "17",
                            "290331"});
#line 4
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table1, "Given ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "arv",
                            "true"});
                table2.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 9
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table2, "And ");
#line hidden
#line 13
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table3.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table3.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table3.AddRow(new string[] {
                            "17",
                            "290331"});
#line 18
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table3, "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table4.AddRow(new string[] {
                            "arv",
                            "true"});
                table4.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 23
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table4, "And ");
#line hidden
#line 27
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table5.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table5.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table5.AddRow(new string[] {
                            "17",
                            "290331"});
#line 32
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table5, "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table6.AddRow(new string[] {
                            "arv",
                            "true"});
                table6.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 37
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table6, "And ");
#line hidden
#line 41
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmg" +
                        "f\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table7.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table7.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table7.AddRow(new string[] {
                            "17",
                            "290331"});
#line 46
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table7, "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table8.AddRow(new string[] {
                            "arv",
                            "true"});
                table8.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 51
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table8, "And ");
#line hidden
#line 55
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table9.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table9.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table9.AddRow(new string[] {
                            "17",
                            "290331"});
#line 61
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table9, "Given ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "arv",
                            "true"});
                table10.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 66
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table10, "And ");
#line hidden
#line 70
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table11.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table11.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table11.AddRow(new string[] {
                            "17",
                            "290331"});
#line 76
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table11, "Given ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "arv",
                            "true"});
                table12.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 81
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table12, "And ");
#line hidden
#line 85
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with fragment specifier - compress non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with fragment specifier - compress non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with fragment specifier - compress non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table13.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table13.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table13.AddRow(new string[] {
                            "17",
                            "290331"});
#line 91
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table13, "Given ");
#line hidden
#line 96
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 98
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 100
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331#ch" +
                        "apter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed GS1 Digital Link with fragment specifier - compress non-GS1 " +
            "key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed GS1 Digital Link with fragment specifier - compress non-GS1 " +
            "key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedGS1DigitalLinkWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed GS1 Digital Link with fragment specifier - compress non-GS1 " +
                    "key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table14.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table14.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table14.AddRow(new string[] {
                            "17",
                            "290331"});
#line 103
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table14, "Given ");
#line hidden
#line 108
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw#chapter1\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link with fragment specifier - compress non-GS1 key-value pair" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link with fragment specifier - compress non-GS1 key-value pair" +
            "s")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link with fragment specifier - compress non-GS1 key-value pair" +
                    "s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table15.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table15.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table15.AddRow(new string[] {
                            "17",
                            "290331"});
#line 115
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table15, "Given ");
#line hidden
#line 120
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 121
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 123
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 124
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with fragment specifier and compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with fragment specifier and compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with fragment specifier and compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table16.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table16.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table16.AddRow(new string[] {
                            "17",
                            "290331"});
#line 127
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table16, "Given ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table17.AddRow(new string[] {
                            "arv",
                            "true"});
                table17.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 132
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table17, "And ");
#line hidden
#line 136
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 137
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 138
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 139
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 140
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link with fragment specifier and compressed non-GS1 " +
            "key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link with fragment specifier and compressed non-GS1 " +
            "key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link with fragment specifier and compressed non-GS1 " +
                    "key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table18.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table18.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table18.AddRow(new string[] {
                            "17",
                            "290331"});
#line 143
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table18, "Given ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table19.AddRow(new string[] {
                            "arv",
                            "true"});
                table19.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 148
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table19, "And ");
#line hidden
#line 152
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 153
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 154
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 155
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 156
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed GS1 Digital Link with fragment specifier and compressed non-GS1 key-va" +
            "lue pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed GS1 Digital Link with fragment specifier and compressed non-GS1 key-va" +
            "lue pairs")]
        public async System.Threading.Tasks.Task CompressedGS1DigitalLinkWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed GS1 Digital Link with fragment specifier and compressed non-GS1 key-va" +
                    "lue pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table20.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table20.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table20.AddRow(new string[] {
                            "17",
                            "290331"});
#line 159
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table20, "Given ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table21.AddRow(new string[] {
                            "arv",
                            "true"});
                table21.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 164
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table21, "And ");
#line hidden
#line 168
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 169
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 170
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 171
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 172
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D4#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 175
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table22.AddRow(new string[] {
                            "arv",
                            "true"});
                table22.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 176
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table22, "And ");
#line hidden
#line 180
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 181
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 182
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link from element string with non-GS1 key-value pair" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link from element string with non-GS1 key-value pair" +
            "s")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link from element string with non-GS1 key-value pair" +
                    "s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 185
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table23.AddRow(new string[] {
                            "arv",
                            "true"});
                table23.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 186
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table23, "And ");
#line hidden
#line 190
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 191
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 192
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link from element string with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link from element string with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link from element string with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 196
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table24.AddRow(new string[] {
                            "arv",
                            "true"});
                table24.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 197
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table24, "And ");
#line hidden
#line 201
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 202
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 203
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmg" +
                        "f\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 206
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table25.AddRow(new string[] {
                            "arv",
                            "true"});
                table25.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 207
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table25, "And ");
#line hidden
#line 211
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 212
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 213
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 214
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link from element string with compressed non-GS1 key" +
            "-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link from element string with compressed non-GS1 key" +
            "-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkFromElementStringWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link from element string with compressed non-GS1 key" +
                    "-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 217
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table26.AddRow(new string[] {
                            "arv",
                            "true"});
                table26.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 218
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table26, "And ");
#line hidden
#line 222
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 223
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 224
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 225
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link from element string with compressed non-GS1 key-value pai" +
            "rs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link from element string with compressed non-GS1 key-value pai" +
            "rs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkFromElementStringWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link from element string with compressed non-GS1 key-value pai" +
                    "rs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 228
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table27.AddRow(new string[] {
                            "arv",
                            "true"});
                table27.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 229
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table27, "And ");
#line hidden
#line 233
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 234
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 235
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 236
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with fragment specifier - compress non-GS1 key-v" +
            "alue pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with fragment specifier - compress non-GS1 key-v" +
            "alue pairs")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with fragment specifier - compress non-GS1 key-v" +
                    "alue pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 238
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 239
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 240
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 241
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 242
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 243
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 244
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331#ch" +
                        "apter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link from element string with fragment specifier - c" +
            "ompress non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link from element string with fragment specifier - c" +
            "ompress non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkFromElementStringWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link from element string with fragment specifier - c" +
                    "ompress non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 247
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 248
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 249
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 250
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 251
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 252
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw#chapter1\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link from element string with fragment specifier - compress no" +
            "n-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link from element string with fragment specifier - compress no" +
            "n-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkFromElementStringWithFragmentSpecifier_CompressNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link from element string with fragment specifier - compress no" +
                    "n-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 255
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 256
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 257
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 258
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 259
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 260
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with fragment specifier and compressed non-GS1 k" +
            "ey-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with fragment specifier and compressed non-GS1 k" +
            "ey-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with fragment specifier and compressed non-GS1 k" +
                    "ey-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 263
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table28.AddRow(new string[] {
                            "arv",
                            "true"});
                table28.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 264
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table28, "And ");
#line hidden
#line 268
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 269
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 270
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 271
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 272
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link from element string with  fragment specifier an" +
            "d compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link from element string with  fragment specifier an" +
            "d compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkFromElementStringWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link from element string with  fragment specifier an" +
                    "d compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 275
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "arv",
                            "true"});
                table29.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 276
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table29, "And ");
#line hidden
#line 280
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 281
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 282
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 283
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 284
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link from element string with fragment specifier and compresse" +
            "d non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link from element string with fragment specifier and compresse" +
            "d non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkFromElementStringWithFragmentSpecifierAndCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link from element string with fragment specifier and compresse" +
                    "d non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 287
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table30.AddRow(new string[] {
                            "arv",
                            "true"});
                table30.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 288
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table30, "And ");
#line hidden
#line 292
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 293
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 294
 await testRunner.AndAsync("a fragment specifier, as follows: \"chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 295
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 296
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D4#chapter1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compress uncompressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compress uncompressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyCompressUncompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compress uncompressed Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 298
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 299
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123?1" +
                        "7=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 300
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 301
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 302
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compress uncompressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 304
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 305
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123?1" +
                        "7=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 306
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 307
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 308
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmg" +
                        "f\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compress uncompressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compress uncompressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        public async System.Threading.Tasks.Task PartiallyCompressUncompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compress uncompressed Digital Link with compressed non-GS1 key-value pa" +
                    "irs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 310
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 311
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123?1" +
                        "7=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 312
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 313
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 314
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 315
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compress uncompressed Digital Link with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 318
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123?1" +
                        "7=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 319
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 320
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 321
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 322
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress partially compressed Digital Link with additional non-GS1 key-value pa" +
            "irs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with additional non-GS1 key-value pa" +
            "irs")]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithAdditionalNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with additional non-GS1 key-value pa" +
                    "irs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 324
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 325
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG" +
                        "w?arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 326
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 327
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 328
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress compressed Digital Link with additional non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with additional non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithAdditionalNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with additional non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 330
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 331
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=tru" +
                        "e&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 332
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 333
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 334
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially decompress compressed Digital Link with additional non-GS1 key-value pa" +
            "irs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with additional non-GS1 key-value pa" +
            "irs")]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithAdditionalNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with additional non-GS1 key-value pa" +
                    "irs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 336
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 337
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=tru" +
                        "e&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 338
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 339
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 340
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress partially compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with compressed non-GS1 key-value pa" +
                    "irs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 342
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 343
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG" +
                        "w?arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 344
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 345
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 346
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 347
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress compressed Digital Link with compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 350
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=tru" +
                        "e&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 351
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 352
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 353
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 354
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs")]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
                    "irs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 356
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 357
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=tru" +
                        "e&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 358
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 359
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 360
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 361
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress partially compressed Digital Link containing compressed non-GS1 key-va" +
            "lue pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link containing compressed non-GS1 key-va" +
            "lue pairs")]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkContainingCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link containing compressed non-GS1 key-va" +
                    "lue pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 363
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 364
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG" +
                        "_BtV3sJbXc94V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 365
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 366
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 367
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Decompress compressed Digital Link containing compressed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link containing compressed non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkContainingCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link containing compressed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 369
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 370
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etr" +
                        "ue8K7RPRWwjc0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 371
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 372
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 373
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially decompress compressed Digital Link containing compressed non-GS1 key-va" +
            "lue pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link containing compressed non-GS1 key-va" +
            "lue pairs")]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkContainingCompressedNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link containing compressed non-GS1 key-va" +
                    "lue pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 375
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 376
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etr" +
                        "ue8K7RPRWwjc0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 377
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 378
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 379
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs - specify compression of other key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
            "irs - specify compression of other key-value pairs")]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairs_SpecifyCompressionOfOtherKey_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with compressed non-GS1 key-value pa" +
                    "irs - specify compression of other key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 381
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 382
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etr" +
                        "ue8K7RPRWwjc0D4\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 383
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 384
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 385
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 386
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc9" +
                        "4V2ieithG5oHw\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Compress uncompressed Digital Link with non key-value data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with non key-value data")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&someparameter&arv=true&a" +
            "notherparameter&donor=bmgf", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter", new string[0])]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithNonKey_ValueData(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with non key-value data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 388
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 389
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 390
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 391
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 392
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 393
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Compress uncompressed Digital Link with non key-value data and no compression of " +
            "non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with non key-value data and no compression of " +
            "non-GS1 key-value pairs")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&someparameter&arv=true&a" +
            "notherparameter&donor=bmgf", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter&anothe" +
            "rparameter", new string[0])]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithNonKey_ValueDataAndNoCompressionOfNon_GS1Key_ValuePairs(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with non key-value data and no compression of " +
                    "non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 401
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 402
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 403
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 404
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 405
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress compressed Digital Link with non key-value data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with non key-value data")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter", new string[0])]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithNonKey_ValueData(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with non key-value data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 413
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 414
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 415
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 416
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 417
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
            "S1 key-pair values")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
            "S1 key-pair values")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter&anothe" +
            "rparameter", new string[0])]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithNonKey_ValueDataAndUncompressedNon_GS1Key_PairValues(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
                    "S1 key-pair values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 425
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 426
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 427
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 428
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 429
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Partially decompress compressed Digital Link with non key-value data and compress" +
            " non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with non key-value data and compress" +
            " non-GS1 key-value pairs")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter&anotherparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter", new string[0])]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithNonKey_ValueDataAndCompressNon_GS1Key_ValuePairs(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with non key-value data and compress" +
                    " non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 437
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 438
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 439
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 440
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 441
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 442
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Partially decompress compressed Digital Link with non key-value data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with non key-value data")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM?someparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er&anotherparameter", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter", new string[0])]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithNonKey_ValueData(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with non key-value data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 451
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 452
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 453
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 454
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 455
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress partially compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/01/05412345000013/EEarwSM?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter", "https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter&anotherparameter", new string[0])]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithNonKey_ValueDataAndCompressedNon_GS1Key_ValuePairs(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with non key-value data and compress" +
                    "ed non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 463
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 464
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 465
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 466
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 467
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress partially compressed Digital Link with non key-value data and uncompre" +
            "ssed non-GS1 key-pair values")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with non key-value data and uncompre" +
            "ssed non-GS1 key-pair values")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter", "https://id.gs1.org/01/05412345000013/EEarwSM?someparameter", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter", "https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter", "https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er&anotherparameter", new string[0])]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithNonKey_ValueDataAndUncompressedNon_GS1Key_PairValues(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with non key-value data and uncompre" +
                    "ssed non-GS1 key-pair values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 475
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 476
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 477
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 478
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 479
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Compress uncompressed Digital Link with non key-value data and fragment specifier" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with non key-value data and fragment specifier" +
            "")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter#cha" +
            "pter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&someparameter&arv=true&a" +
            "notherparameter&donor=bmgf#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithNonKey_ValueDataAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with non key-value data and fragment specifier" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 487
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 488
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 489
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 490
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 491
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 492
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Compress uncompressed Digital Link with non key-value data and no compression of " +
            "non-GS1 key-value pairs and fragment specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compress uncompressed Digital Link with non key-value data and no compression of " +
            "non-GS1 key-value pairs and fragment specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter#chapte" +
            "r1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&someparameter&arv=true&a" +
            "notherparameter&donor=bmgf#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter&anothe" +
            "rparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task CompressUncompressedDigitalLinkWithNonKey_ValueDataAndNoCompressionOfNon_GS1Key_ValuePairsAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compress uncompressed Digital Link with non key-value data and no compression of " +
                    "non-GS1 key-value pairs and fragment specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 501
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 502
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 503
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 504
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 505
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress compressed Digital Link with non key-value data and fragment specifier" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with non key-value data and fragment specifier" +
            "")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter#cha" +
            "pter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithNonKey_ValueDataAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with non key-value data and fragment specifier" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 514
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 515
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 516
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 517
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 518
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
            "S1 key-pair values and fragment specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
            "S1 key-pair values and fragment specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter#chapte" +
            "r1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmgf&someparameter&anothe" +
            "rparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task DecompressCompressedDigitalLinkWithNonKey_ValueDataAndUncompressedNon_GS1Key_PairValuesAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress compressed Digital Link with non key-value data and uncompressed non-G" +
                    "S1 key-pair values and fragment specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 527
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 528
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 529
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 530
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 531
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Partially decompress compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs and fragment specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs and fragment specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter#cha" +
            "pter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter&anotherparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithNonKey_ValueDataAndCompressedNon_GS1Key_ValuePairsAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with non key-value data and compress" +
                    "ed non-GS1 key-value pairs and fragment specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 540
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 541
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 542
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 543
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 544
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 545
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Partially decompress compressed Digital Link with non key-value data and fragment" +
            " specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially decompress compressed Digital Link with non key-value data and fragment" +
            " specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSM?someparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JG?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter#cha" +
            "pter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er&anotherparameter#chapter1", "https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwjc0D4?someparameter&ano" +
            "therparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task PartiallyDecompressCompressedDigitalLinkWithNonKey_ValueDataAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially decompress compressed Digital Link with non key-value data and fragment" +
                    " specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 555
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 556
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 557
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 558
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 559
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress partially compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs and fragment specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with non key-value data and compress" +
            "ed non-GS1 key-value pairs and fragment specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSM#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSM?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSMXRuG_BtV3sJbXc94V2ieithG5oHw?somepara" +
            "meter&anotherparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithNonKey_ValueDataAndCompressedNon_GS1Key_ValuePairsAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with non key-value data and compress" +
                    "ed non-GS1 key-value pairs and fragment specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 568
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 569
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 570
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 571
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 572
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Decompress partially compressed Digital Link with non key-value data and uncompre" +
            "ssed non-GS1 key-pair values and fragment specifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Decompress partially compressed Digital Link with non key-value data and uncompre" +
            "ssed non-GS1 key-pair values and fragment specifier")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSM#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSM?someparameter#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er#chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter#chapter1", "https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&donor=bmgf&someparamet" +
            "er&anotherparameter#chapter1", new string[0])]
        public async System.Threading.Tasks.Task DecompressPartiallyCompressedDigitalLinkWithNonKey_ValueDataAndUncompressedNon_GS1Key_PairValuesAndFragmentSpecifier(string digitalLinkUri, string compressedDigitalLinkUri, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("compressedDigitalLinkUri", compressedDigitalLinkUri);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decompress partially compressed Digital Link with non key-value data and uncompre" +
                    "ssed non-GS1 key-pair values and fragment specifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 581
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 582
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", compressedDigitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 583
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 584
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 585
 await testRunner.ThenAsync(string.Format("the result should be \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Extract data from a GS1 Digital Link with non key-value data and fragment specifi" +
            "er")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Extract data from a GS1 Digital Link with non key-value data and fragment specifi" +
            "er")]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123#chapter1", "{\"01\":\"05412345000013\",\"10\":\"ABC123\"}", "", "", "chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?someparameter#chapter1", "{\"01\":\"05412345000013\",\"10\":\"ABC123\"}", "", "someparameter", "chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter#chapter1", "{\"01\":\"05412345000013\",\"10\":\"ABC123\",\"17\":\"290331\"}", "{\"arv\":true,\"donor\":\"bmgf\"}", "someparameter", "chapter1", new string[0])]
        [Xunit.InlineDataAttribute("https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&arv=true&donor=bmgf&some" +
            "parameter&anotherparameter#chapter1", "{\"01\":\"05412345000013\",\"10\":\"ABC123\",\"17\":\"290331\"}", "{\"arv\":true,\"donor\":\"bmgf\"}", "someparameter&anotherparameter", "chapter1", new string[0])]
        public async System.Threading.Tasks.Task ExtractDataFromAGS1DigitalLinkWithNonKey_ValueDataAndFragmentSpecifier(string digitalLinkUri, string gs1DigitalLinkData, string nonGs1KeyValuePairs, string otherQueryStringContent, string fragmentSpecifier, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("digitalLinkUri", digitalLinkUri);
            argumentsOfScenario.Add("gs1DigitalLinkData", gs1DigitalLinkData);
            argumentsOfScenario.Add("nonGs1KeyValuePairs", nonGs1KeyValuePairs);
            argumentsOfScenario.Add("otherQueryStringContent", otherQueryStringContent);
            argumentsOfScenario.Add("fragmentSpecifier", fragmentSpecifier);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extract data from a GS1 Digital Link with non key-value data and fragment specifi" +
                    "er", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 595
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 596
 await testRunner.GivenAsync(string.Format("the following Digital Link URI: \"{0}\"", digitalLinkUri), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 597
 await testRunner.WhenAsync("I extract data from the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table31.AddRow(new string[] {
                            "gs1DigitalLinkData",
                            string.Format("{0}", gs1DigitalLinkData)});
                table31.AddRow(new string[] {
                            "NonGs1KeyValuePairs",
                            string.Format("{0}", nonGs1KeyValuePairs)});
                table31.AddRow(new string[] {
                            "OtherQueryStringContent",
                            string.Format("{0}", otherQueryStringContent)});
                table31.AddRow(new string[] {
                            "FragmentSpecifier",
                            string.Format("{0}", fragmentSpecifier)});
#line 598
 await testRunner.ThenAsync("the data result should be:", ((string)(null)), table31, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task OptimisedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 612
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table32.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table32.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table32.AddRow(new string[] {
                            "17",
                            "290331"});
                table32.AddRow(new string[] {
                            "21",
                            "R759025244015BJ"});
#line 613
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table32, "Given ");
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table33.AddRow(new string[] {
                            "arv",
                            "true"});
                table33.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 619
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table33, "And ");
#line hidden
#line 623
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 624
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 625
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 626
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123/21/R75902524" +
                        "4015BJ?17=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised partially compressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised partially compressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task OptimisedPartiallyCompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised partially compressed Digital Link with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 628
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table34.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table34.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table34.AddRow(new string[] {
                            "17",
                            "290331"});
                table34.AddRow(new string[] {
                            "21",
                            "R759025244015BJ"});
#line 629
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table34, "Given ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table35.AddRow(new string[] {
                            "arv",
                            "true"});
                table35.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 635
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table35, "And ");
#line hidden
#line 639
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 640
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 641
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 642
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGyFvR7590252" +
                        "44015BJ?arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised compressed Digital Link with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised compressed Digital Link with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task OptimisedCompressedDigitalLinkWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised compressed Digital Link with non-GS1 key-value pairs", "\t\t  unoptimised: https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DZC3o98-6bc7ccaa8gkg?arv=t" +
                    "rue&donor=bmgf\r\n\t\t  optimised:   https://id.gs1.org/GgnYUc1gmo1Xgkbej3z7ptztxxpr" +
                    "yCSjcNg?arv=true&donor=bmgf", tagsOfScenario, argumentsOfScenario, featureTags);
#line 644
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table36.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table36.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table36.AddRow(new string[] {
                            "17",
                            "290331"});
                table36.AddRow(new string[] {
                            "21",
                            "R759025244015BJ"});
#line 647
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table36, "Given ");
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table37.AddRow(new string[] {
                            "arv",
                            "true"});
                table37.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 653
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table37, "And ");
#line hidden
#line 657
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 658
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 659
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 660
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/GgnYUc1gmo1Xgkbej3z7ptztxxpryCSjcNg?arv=" +
                        "true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised Digital Link from element string with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised Digital Link from element string with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task OptimisedDigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised Digital Link from element string with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 662
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 663
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331(21)R7590252" +
                        "44015BJ\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table38.AddRow(new string[] {
                            "arv",
                            "true"});
                table38.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 664
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table38, "And ");
#line hidden
#line 668
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 669
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 670
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 671
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123/21/R75902524" +
                        "4015BJ?17=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised partially compressed Digital Link from element string with non-GS1 key-" +
            "value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised partially compressed Digital Link from element string with non-GS1 key-" +
            "value pairs")]
        public async System.Threading.Tasks.Task OptimisedPartiallyCompressedDigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised partially compressed Digital Link from element string with non-GS1 key-" +
                    "value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 673
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 674
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331(21)R7590252" +
                        "44015BJ\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table39.AddRow(new string[] {
                            "arv",
                            "true"});
                table39.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 675
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table39, "And ");
#line hidden
#line 679
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 680
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 681
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 682
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGyFvR7590252" +
                        "44015BJ?arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimised compressed Digital Link from element string with non-GS1 key-value pair" +
            "s")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Optimised compressed Digital Link from element string with non-GS1 key-value pair" +
            "s")]
        public async System.Threading.Tasks.Task OptimisedCompressedDigitalLinkFromElementStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Optimised compressed Digital Link from element string with non-GS1 key-value pair" +
                    "s", "\t\t  unoptimised: https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DZC3o98-6bc7ccaa8gkg?arv=t" +
                    "rue&donor=bmgf\r\n\t\t  optimised:   https://id.gs1.org/GgnYUc1gmo1Xgkbej3z7ptztxxpr" +
                    "yCSjcNg?arv=true&donor=bmgf", tagsOfScenario, argumentsOfScenario, featureTags);
#line 684
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 687
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331(21)R7590252" +
                        "44015BJ\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table40.AddRow(new string[] {
                            "arv",
                            "true"});
                table40.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 688
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table40, "And ");
#line hidden
#line 692
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 693
 await testRunner.AndAsync("optimisation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 694
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 695
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/GgnYUc1gmo1Xgkbej3z7ptztxxpryCSjcNg?arv=" +
                        "true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with non-GS1 key-value pairs and other content")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with non-GS1 key-value pairs and other content")]
        public async System.Threading.Tasks.Task DigitalLinkWithNon_GS1Key_ValuePairsAndOtherContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with non-GS1 key-value pairs and other content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 697
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table41.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table41.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table41.AddRow(new string[] {
                            "17",
                            "290331"});
#line 698
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table41, "Given ");
#line hidden
                global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table42.AddRow(new string[] {
                            "arv",
                            "true"});
                table42.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 703
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table42, "And ");
#line hidden
#line 707
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 708
 await testRunner.AndAsync("other query content: \"abc=123&someotherparameter&xyz=321\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 709
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 710
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/10/ABC123?17=290331&ar" +
                        "v=true&donor=bmgf&abc=123&xyz=321&someotherparameter\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partially compressed Digital Link with non-GS1 key-value pairs and other content")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Partially compressed Digital Link with non-GS1 key-value pairs and other content")]
        public async System.Threading.Tasks.Task PartiallyCompressedDigitalLinkWithNon_GS1Key_ValuePairsAndOtherContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially compressed Digital Link with non-GS1 key-value pairs and other content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 712
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table43 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table43.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table43.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table43.AddRow(new string[] {
                            "17",
                            "290331"});
#line 713
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table43, "Given ");
#line hidden
                global::Reqnroll.Table table44 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table44.AddRow(new string[] {
                            "arv",
                            "true"});
                table44.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 718
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table44, "And ");
#line hidden
#line 722
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 723
 await testRunner.AndAsync("other query content: \"abc=123&someotherparameter&xyz=321\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 724
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 725
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/01/05412345000013/EEarwSMXRuGw?arv=true&" +
                        "donor=bmgf&abc=123&xyz=321&someotherparameter\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link with non-GS1 key-value pairs and other content")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link with non-GS1 key-value pairs and other content")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkWithNon_GS1Key_ValuePairsAndOtherContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link with non-GS1 key-value pairs and other content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 727
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table45 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table45.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table45.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table45.AddRow(new string[] {
                            "17",
                            "290331"});
#line 728
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table45, "Given ");
#line hidden
                global::Reqnroll.Table table46 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table46.AddRow(new string[] {
                            "arv",
                            "true"});
                table46.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 733
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table46, "And ");
#line hidden
#line 737
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 738
 await testRunner.AndAsync("other query content: \"abc=123&someotherparameter&xyz=321\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 739
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 740
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3DY?arv=true&donor=bmg" +
                        "f&abc=123&xyz=321&someotherparameter\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compressed Digital Link with compressed non-GS1 key-value pairs and other content" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Compressed Digital Link with compressed non-GS1 key-value pairs and other content" +
            "")]
        public async System.Threading.Tasks.Task CompressedDigitalLinkWithCompressedNon_GS1Key_ValuePairsAndOtherContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compressed Digital Link with compressed non-GS1 key-value pairs and other content" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 742
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table47.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table47.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table47.AddRow(new string[] {
                            "17",
                            "290331"});
#line 743
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table47, "Given ");
#line hidden
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table48.AddRow(new string[] {
                            "arv",
                            "true"});
                table48.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 748
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table48, "And ");
#line hidden
#line 752
 await testRunner.AndAsync("compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 753
 await testRunner.AndAsync("compress other key-value pairs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 754
 await testRunner.AndAsync("other query content: \"abc=123&someotherparameter&xyz=321\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 755
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 756
 await testRunner.ThenAsync("the result should be \"https://id.gs1.org/AQnYUc1gmiCNV4JGLo3Dfg2q72Etrue8K7RPRWwj" +
                        "c0D_g2m3ADHvweOWYBqC?someotherparameter\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (check digit) element string")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (check digit) element string")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidCheckDigitElementString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (check digit) element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 758
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 759
 await testRunner.GivenAsync("the following element string: \"(01)05412345000012(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 760
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 761
    await testRunner.ThenAsync("an exception with message \"The value 05412345000012 is invalid for AI 01.\" is thr" +
                        "own", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 762
 await testRunner.AndAsync("an exception with message \"The value 05412345000012 has an invalid checksum.\" is " +
                        "thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 763
 await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (disallowed character) element string")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (disallowed character) element string")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidDisallowedCharacterElementString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (disallowed character) element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 765
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 766
 await testRunner.GivenAsync("the following element string: \"(01)0541234B000013(10)ABC123(17)290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 767
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 768
    await testRunner.ThenAsync("an exception with message \"The value 0541234B000013 is invalid for AI 01.\" is thr" +
                        "own", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 769
 await testRunner.AndAsync("an exception with message \"The value 0541234B000013 does not match the specified " +
                        "pattern for the data element.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 770
 await testRunner.AndAsync("an exception with message \"The value 0541234B000013 has an invalid checksum.\" is " +
                        "thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 771
 await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (invalid date) element string")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (invalid date) element string")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidInvalidDateElementString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (invalid date) element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 773
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 774
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)294731\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 775
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 776
    await testRunner.ThenAsync("an exception with message \"The value 294731 is invalid for AI 17.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 777
 await testRunner.AndAsync("an exception with message \"The value 294731 does not match the specified pattern " +
                        "for the data element.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 778
 await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid data (invalid date)")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid data (invalid date)")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidDataInvalidDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid data (invalid date)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 780
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table49.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table49.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table49.AddRow(new string[] {
                            "17",
                            "290366"});
#line 781
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table49, "Given ");
#line hidden
#line 786
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 787
    await testRunner.ThenAsync("an exception with message \"The value 290366 is invalid for AI 17.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 788
    await testRunner.AndAsync("an exception with message \"The value 290366 does not match the specified pattern " +
                        "for the data element.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 789
    await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid data (check digit)")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid data (check digit)")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidDataCheckDigit()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid data (check digit)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 791
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table50 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table50.AddRow(new string[] {
                            "01",
                            "05412345000012"});
                table50.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table50.AddRow(new string[] {
                            "17",
                            "290331"});
#line 792
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table50, "Given ");
#line hidden
#line 797
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 798
    await testRunner.ThenAsync("an exception with message \"The value 05412345000012 is invalid for AI 01.\" is thr" +
                        "own", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 799
    await testRunner.AndAsync("an exception with message \"The value 05412345000012 has an invalid checksum.\" is " +
                        "thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 800
    await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid data (no AI)")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid data (no AI)")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidDataNoAI()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid data (no AI)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 802
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table51 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table51.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table51.AddRow(new string[] {
                            "17",
                            "290331"});
#line 803
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table51, "Given ");
#line hidden
#line 807
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 808
    await testRunner.ThenAsync("an exception with message \"No key identifier found in the GS1 DigitalLink URI pat" +
                        "h information.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid data (invalid sequence)")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid data (invalid sequence)")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidDataInvalidSequence()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid data (invalid sequence)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 810
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table52 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table52.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table52.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table52.AddRow(new string[] {
                            "17",
                            "290331"});
                table52.AddRow(new string[] {
                            "22",
                            "054123450000130123"});
                table52.AddRow(new string[] {
                            "235",
                            "7BRT873085HF7298"});
#line 811
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table52, "Given ");
#line hidden
#line 818
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 819
    await testRunner.ThenAsync("an exception with message \"Invalid sequence of key qualifiers found in the GS1 Di" +
                        "gitalLink URI path information.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (invalid sequence) element string")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (invalid sequence) element string")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidInvalidSequenceElementString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (invalid sequence) element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 821
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 822
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331(22)05412345" +
                        "0000130123(235)7BRT873085HF7298\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 823
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 824
    await testRunner.ThenAsync("an exception with message \"Invalid sequence of key qualifiers found in the GS1 Di" +
                        "gitalLink URI path information.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (invalid sequence) Digital Link")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (invalid sequence) Digital Link")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidInvalidSequenceDigitalLink()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (invalid sequence) Digital Link", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 826
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 827
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123/2" +
                        "2/054123450000130123/235/7BRT873085HF7298?17=290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 828
 await testRunner.WhenAsync("I extract data from the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 829
    await testRunner.ThenAsync("an exception with message \"Invalid sequence of key qualifiers found in the GS1 Di" +
                        "gitalLink URI path information.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid (invalid sequence) Digital Link during compression")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid (invalid sequence) Digital Link during compression")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidInvalidSequenceDigitalLinkDuringCompression()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid (invalid sequence) Digital Link during compression", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 831
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 832
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123/2" +
                        "2/054123450000130123/235/7BRT873085HF7298?17=290331\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 833
 await testRunner.AndAsync("partial compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 834
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 835
    await testRunner.ThenAsync("an exception with message \"Invalid sequence of key qualifiers found in the GS1 Di" +
                        "gitalLink URI path information.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from invalid data")]
        public async System.Threading.Tasks.Task DigitalLinkFromInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 837
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 838
 await testRunner.GivenAsync("the following Digital Link URI: \"RY9V0U42Y325UR5723YY2YRWUIWERYWEWIBYRIHDYPW0NVEW" +
                        "9UT34YTYUTURIEWVUOIWETU\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 839
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 840
 await testRunner.WhenAsync("I change the compression level of the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 841
    await testRunner.ThenAsync("an exception with message \"Unable to determine the form of the Digital Link.\" is " +
                        "thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with invalid data")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 843
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 844
 await testRunner.GivenAsync("the following element string: \"RY9V0U42Y325UR5723YY2YRWUIWERYWEWIBYRIHDYPW0NVEW9U" +
                        "T34YTYUTURIEWVUOIWETU\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 845
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 846
    await testRunner.ThenAsync("an exception with message \"Invalid application identifier RY.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 847
    await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with MH10.8.2 data")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with MH10.8.2 data")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithMH10_8_2Data()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with MH10.8.2 data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 849
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 850
 await testRunner.GivenAsync("the following element string: \"[)><RS>06<GS>9N110186865770<GS>1TABC123<GS>D290331" +
                        "<GS>SR759025244015BJ<RS><EOT>\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 851
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 852
    await testRunner.ThenAsync("an exception with message \"The element string \'[)>069N1101868657701TABC123D29" +
                        "0331SR759025244015BJ\' does not represent GS1 Digital Link data.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link with invalid non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link with invalid non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkWithInvalidNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link with invalid non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 854
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table53 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table53.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table53.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table53.AddRow(new string[] {
                            "17",
                            "290331"});
#line 855
 await testRunner.GivenAsync("the following AIs:", ((string)(null)), table53, "Given ");
#line hidden
                global::Reqnroll.Table table54 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table54.AddRow(new string[] {
                            "999",
                            "true"});
                table54.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 860
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table54, "And ");
#line hidden
#line 864
 await testRunner.AndAsync("no compression", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 865
 await testRunner.WhenAsync("I build a GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 866
    await testRunner.ThenAsync("an exception with message \"\'999=true\' is invalid. Non-GS1 key values must not be " +
                        "all-numeric.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Digital Link from element string with invalid non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Digital Link from element string with invalid non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DigitalLinkFromElementStringWithInvalidNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Digital Link from element string with invalid non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 868
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 869
 await testRunner.GivenAsync("the following element string: \"(01)05412345000013(10)ABC123(17)290331(22)05412345" +
                        "0000130123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table55 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table55.AddRow(new string[] {
                            "999",
                            "true"});
                table55.AddRow(new string[] {
                            "donor",
                            "bmgf"});
#line 870
 await testRunner.AndAsync("the following non-GS1 key-value pairs:", ((string)(null)), table55, "And ");
#line hidden
#line 874
 await testRunner.WhenAsync("I translate the element string to a Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 875
    await testRunner.ThenAsync("an exception with message \"\'999=true\' is invalid. Non-GS1 key values must not be " +
                        "all-numeric.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Data from Digital Link string with invalid non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Data from Digital Link string with invalid non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task DataFromDigitalLinkStringWithInvalidNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Data from Digital Link string with invalid non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 877
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 878
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123/2" +
                        "2/054123450000130123?17=290331&999=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 879
 await testRunner.WhenAsync("I extract data from the GS1 Digital Link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 880
    await testRunner.ThenAsync("an exception with message \"\'999=true\' is invalid. Non-GS1 key values must not be " +
                        "all-numeric.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Analysis of Digital Link string with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Analysis of Digital Link string with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task AnalysisOfDigitalLinkStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Analysis of Digital Link string with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 882
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 883
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123/2" +
                        "2/054123450000130123?17=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 884
 await testRunner.WhenAsync("I analyse the GS1 Digital Link URI", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table56 = new global::Reqnroll.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table56.AddRow(new string[] {
                            "DetectedForm",
                            "Uncompressed"});
                table56.AddRow(new string[] {
                            "ElementStringOutput",
                            "(01)05412345000013(22)054123450000130123(10)ABC123(17)290331"});
                table56.AddRow(new string[] {
                            "PathComponents",
                            "/01/05412345000013/10/ABC123/22/054123450000130123"});
                table56.AddRow(new string[] {
                            "QueryString",
                            "17=290331&arv=true&donor=bmgf"});
                table56.AddRow(new string[] {
                            "UriStem",
                            "https://id.gs1.org"});
#line 885
 await testRunner.ThenAsync("the analysis should contain:", ((string)(null)), table56, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Semantic analysis of Digital Link string with non-GS1 key-value pairs")]
        [Xunit.TraitAttribute("FeatureTitle", "AdditionalUriContent")]
        [Xunit.TraitAttribute("Description", "Semantic analysis of Digital Link string with non-GS1 key-value pairs")]
        public async System.Threading.Tasks.Task SemanticAnalysisOfDigitalLinkStringWithNon_GS1Key_ValuePairs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Semantic analysis of Digital Link string with non-GS1 key-value pairs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 893
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 894
 await testRunner.GivenAsync("the following Digital Link URI: \"https://id.gs1.org/01/05412345000013/10/ABC123/2" +
                        "2/054123450000130123?17=290331&arv=true&donor=bmgf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 895
 await testRunner.WhenAsync("I analyse the semantics of the GS1 Digital Link URI", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table57 = new global::Reqnroll.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table57.AddRow(new string[] {
                            "gs1:gtin",
                            "05412345000013"});
                table57.AddRow(new string[] {
                            "schema:gtin",
                            "05412345000013"});
                table57.AddRow(new string[] {
                            "gs1:hasBatchLot",
                            "ABC123"});
                table57.AddRow(new string[] {
                            "gs1:consumerProductVariant",
                            "054123450000130123"});
                table57.AddRow(new string[] {
                            "gs1:expirationDate",
                            "2029-03-31"});
                table57.AddRow(new string[] {
                            "gs1:elementStrings",
                            "(01)05412345000013(22)054123450000130123(10)ABC123(17)290331"});
#line 896
 await testRunner.ThenAsync("the semantic analysis should contain:", ((string)(null)), table57, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AdditionalUriContentFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AdditionalUriContentFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
