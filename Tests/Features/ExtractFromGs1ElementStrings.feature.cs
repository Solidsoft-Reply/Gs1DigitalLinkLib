// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Gs1DigitalLinkToolkitTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExtractFromGs1ElementStringsFeature : object, Xunit.IClassFixture<ExtractFromGs1ElementStringsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ExtractFromGs1ElementStrings", "  As a developer\r\n  I want to verify that the ExtractFromGs1ElementStrings method" +
                " correctly parses GS1 an element string\r\n  So that I can ensure its reliability " +
                "and correctness", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ExtractFromGs1ElementStrings.feature"
#line hidden
        
        public ExtractFromGs1ElementStringsFeature(ExtractFromGs1ElementStringsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Parse valid bracketed GS1 an element string")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Parse valid bracketed GS1 an element string")]
        [Xunit.InlineDataAttribute("(01)05412345000013(3103)000189(3923)2172(10)ABC123", "01", "05412345000013", "3103", "000189", "3923", "2172", new string[0])]
        [Xunit.InlineDataAttribute("(02)12345678901231(37)24(21)1234", "02", "12345678901231", "37", "24", "21", "1234", new string[0])]
        public async System.Threading.Tasks.Task ParseValidBracketedGS1AnElementString(string elementString, string aI1, string value1, string aI2, string value2, string aI3, string value3, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("elementString", elementString);
            argumentsOfScenario.Add("AI1", aI1);
            argumentsOfScenario.Add("Value1", value1);
            argumentsOfScenario.Add("AI2", aI2);
            argumentsOfScenario.Add("Value2", value2);
            argumentsOfScenario.Add("AI3", aI3);
            argumentsOfScenario.Add("Value3", value3);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse valid bracketed GS1 an element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync(string.Format("I have a bracketed GS1 element string \"{0}\"", elementString), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table65 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table65.AddRow(new string[] {
                            string.Format("{0}", aI1),
                            string.Format("{0}", value1)});
                table65.AddRow(new string[] {
                            string.Format("{0}", aI2),
                            string.Format("{0}", value2)});
                table65.AddRow(new string[] {
                            string.Format("{0}", aI3),
                            string.Format("{0}", value3)});
#line 9
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table65, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Parse valid unbracketed GS1 an element string")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Parse valid unbracketed GS1 an element string")]
        [Xunit.InlineDataAttribute("0105412345000013310300018939232172<GS>10ABC123", "01", "05412345000013", "3103", "000189", "10", "ABC123", new string[0])]
        [Xunit.InlineDataAttribute("31030001890105412345000013<GS>10XYZ", "3103", "000189", "01", "05412345000013", "10", "XYZ", new string[0])]
        public async System.Threading.Tasks.Task ParseValidUnbracketedGS1AnElementString(string elementString, string aI1, string value1, string aI2, string value2, string aI3, string value3, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("elementString", elementString);
            argumentsOfScenario.Add("AI1", aI1);
            argumentsOfScenario.Add("Value1", value1);
            argumentsOfScenario.Add("AI2", aI2);
            argumentsOfScenario.Add("Value2", value2);
            argumentsOfScenario.Add("AI3", aI3);
            argumentsOfScenario.Add("Value3", value3);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse valid unbracketed GS1 an element string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
    await testRunner.GivenAsync(string.Format("I have an unbracketed GS1 element string \"{0}\"", elementString), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table66 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table66.AddRow(new string[] {
                            string.Format("{0}", aI1),
                            string.Format("{0}", value1)});
                table66.AddRow(new string[] {
                            string.Format("{0}", aI2),
                            string.Format("{0}", value2)});
                table66.AddRow(new string[] {
                            string.Format("{0}", aI3),
                            string.Format("{0}", value3)});
#line 23
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table66, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Parse GS1 element string with symbology identifiers")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Parse GS1 element string with symbology identifiers")]
        [Xunit.InlineDataAttribute("]C1010541234500001310ABC123", new string[0])]
        [Xunit.InlineDataAttribute("]C1(01)05412345000013(10)ABC123", new string[0])]
        public async System.Threading.Tasks.Task ParseGS1ElementStringWithSymbologyIdentifiers(string elementString, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("elementString", elementString);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GS1 element string with symbology identifiers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
    await testRunner.GivenAsync(string.Format("I have a GS1 element string with symbology identifier \"{0}\"", elementString), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table67 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table67.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table67.AddRow(new string[] {
                            "10",
                            "ABC123"});
#line 37
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table67, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle invalid AI value syntax (bracketed)")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle invalid AI value syntax (bracketed)")]
        public async System.Threading.Tasks.Task HandleInvalidAIValueSyntaxBracketed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle invalid AI value syntax (bracketed)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 48
    await testRunner.GivenAsync("I have a bracketed GS1 element string \"(01)05412345000013(15)ABCDEF\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("an exception with message \"The value ABCDEF is invalid for AI 15\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle invalid AI value syntax (unbracketed)")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle invalid AI value syntax (unbracketed)")]
        public async System.Threading.Tasks.Task HandleInvalidAIValueSyntaxUnbracketed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle invalid AI value syntax (unbracketed)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
    await testRunner.GivenAsync("I have an unbracketed GS1 element string \"010541234500001310ABC123<GS>15ABCDEF\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("an exception with message \"The value ABCDEF is invalid for AI 15.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle invalid AI value syntax (bracketed) without validation")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle invalid AI value syntax (bracketed) without validation")]
        public async System.Threading.Tasks.Task HandleInvalidAIValueSyntaxBracketedWithoutValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle invalid AI value syntax (bracketed) without validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
    await testRunner.GivenAsync("I have a bracketed GS1 element string \"(01)05412345000013(15)ABCDEF\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
    await testRunner.WhenAsync("I extract AIs and values without validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table68 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table68.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table68.AddRow(new string[] {
                            "15",
                            "ABCDEF"});
#line 60
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table68, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle invalid AI value syntax (unbracketed) without validation")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle invalid AI value syntax (unbracketed) without validation")]
        public async System.Threading.Tasks.Task HandleInvalidAIValueSyntaxUnbracketedWithoutValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle invalid AI value syntax (unbracketed) without validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 66
    await testRunner.GivenAsync("I have an unbracketed GS1 element string \"010541234500001310ABC123<GS>15ABCDEF\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 67
    await testRunner.WhenAsync("I extract AIs and values without validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table69 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table69.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table69.AddRow(new string[] {
                            "10",
                            "ABC123"});
                table69.AddRow(new string[] {
                            "15",
                            "ABCDEF"});
#line 68
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table69, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle unknown AI (bracketed)")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle unknown AI (bracketed)")]
        public async System.Threading.Tasks.Task HandleUnknownAIBracketed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle unknown AI (bracketed)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 75
    await testRunner.GivenAsync("I have a bracketed GS1 element string \"(49)991234567890\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
    await testRunner.ThenAsync("an exception with message \"Invalid application identifier 49.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
    await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle unknown AI (unbracketed)")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Handle unknown AI (unbracketed)")]
        public async System.Threading.Tasks.Task HandleUnknownAIUnbracketed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle unknown AI (unbracketed)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 81
    await testRunner.GivenAsync("I have an unbracketed GS1 element string \"49991234567890\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 82
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
    await testRunner.ThenAsync("an exception with message \"Invalid application identifier 49.\" is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 84
    await testRunner.AndAsync("an exception with message \"The barcode contains invalid or unrecognised data.\" is" +
                        " thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GS1 element string with group separators")]
        [Xunit.TraitAttribute("FeatureTitle", "ExtractFromGs1ElementStrings")]
        [Xunit.TraitAttribute("Description", "Parse GS1 element string with group separators")]
        public async System.Threading.Tasks.Task ParseGS1ElementStringWithGroupSeparators()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GS1 element string with group separators", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 87
    await testRunner.GivenAsync("I have an unbracketed GS1 element string \"0105412345000013310300018939232172<GS>1" +
                        "0ABC123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 88
    await testRunner.WhenAsync("I extract AIs and values", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table70 = new global::Reqnroll.Table(new string[] {
                            "AI",
                            "Value"});
                table70.AddRow(new string[] {
                            "01",
                            "05412345000013"});
                table70.AddRow(new string[] {
                            "3103",
                            "000189"});
                table70.AddRow(new string[] {
                            "3923",
                            "2172"});
                table70.AddRow(new string[] {
                            "10",
                            "ABC123"});
#line 89
    await testRunner.ThenAsync("the data should contain:", ((string)(null)), table70, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExtractFromGs1ElementStringsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExtractFromGs1ElementStringsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
